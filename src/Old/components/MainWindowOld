import React, { useRef, useState } from 'react';
import { uppercaseList, lowercaseList, numberList, symbolsList } from './CombinaisonsOld';
import { toast, ToastContainer } from 'react-toastify'
import 'react-toastify/dist/ReactToastify.css';

import CopyIcon from './CombinaisonsOld';

const cs = console.log;

function MainWindow(props) {

    //Declaration *******************/
    const [uppercase, setUppercase] = useState(false);
    const [lowercase, setLowercase] = useState(false);
    const [numbers, setNumbers] = useState(false);
    const [symbols, setSymbols] = useState(false);

    const [passwordfinal, setPasswordfinal] = useState('');

    const passwordGenerated = useRef();
    const passwordLength = useRef();

    //Declaration *******************/


    const handleGeneratePassword = () => {

        let combinationOfCaracters = '';
        let generatedPassword = '';

        if (!uppercase && !lowercase && !numbers && !symbols) {
            cs('please fill in at least one field');
        }
        else {
            if (uppercase) {
                combinationOfCaracters = uppercaseList;
            }
            if (lowercase) {
                combinationOfCaracters = combinationOfCaracters + lowercaseList;
            }
            if (numbers) {
                combinationOfCaracters = combinationOfCaracters + numberList;
            }
            if (symbols) {
                combinationOfCaracters = combinationOfCaracters + symbolsList;
            }

            cs(combinationOfCaracters)

            for (let i = 0; i < passwordLength.current.value; i++) {
                const a = Math.floor(Math.random() * combinationOfCaracters.length);
                const b = combinationOfCaracters.charAt(a);
                generatedPassword = generatedPassword + b
            }
            setPasswordfinal(() => generatedPassword);

        }

        

    }
    const copyPassword = () => {
        if (passwordfinal === "") {
            notify('Please generate a password first',true)
        }
        else {
            navigator.clipboard.writeText(passwordfinal).then(()=>cs('text copied successfully'));
            notify('Password has been copied',false)
        }
    }

    const notify = (message, hasError = false) => {
        if (hasError) {
          toast.error(message, {
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            progress: undefined,
          });
        }
        else {
          toast(message, {
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            progress: undefined,
          });
        }
    
      }

    return (
        <div>
            <div className="mx-auto my-36 flex h-full w-[350px] flex-col border-2 bg-white text-black shadow-xl">
                <div className="mx-8 mt-7 mb-1 flex flex-row justify-start space-x-2">
                    <div className="h-7 w-3 bg-[#0DE6AC]"></div>
                    <div className=" text-center font-sans text-xl font-bold"><h1>Password Generator</h1></div>
                </div>
                <div className="flex flex-col items-center">
                    <div className="my-2 w-72 border p-2 h-10 bg-gray-300 rounded-sm flex justify-between" type="text">
                        <h3 ref={passwordGenerated} id='passwordGenerated'>{passwordfinal}</h3>
                        <button onClick={copyPassword}>
                            <CopyIcon/>
                        </button>
                        
                    </div>
                </div>
                <div className="my-2 flex flex-col items-start ml-24">
                    <div className='flex justify-around flex items-center gap-2'>
                        <input ref={passwordLength} className="my-2 w-10 text-center border" defaultValue="26" type="number" name="letters" id="letters" />
                        <label className='cursor-pointer w-fit' htmlFor="letters">Number of caracters</label>
                    </div>

                    <div className='flex justify-around'>
                        <input onChange={(e) => setLowercase(e.target.checked)} className="cursor-pointer my-2 w-10 border p-2" type="checkbox" name="lowercase" id="lowercase" />
                        <label className='cursor-pointer w-fit' htmlFor="lowercase">Lowercase letters</label>
                    </div>

                    <div className='flex justify-around'>
                        <input onChange={(e) => setUppercase(!uppercase)} className="cursor-pointer my-2 w-10 border p-2" type="checkbox" name="uppercase" id="uppercase" />
                        <label className='cursor-pointer w-fit' htmlFor="uppercase">Uppercase letters</label>
                    </div>

                    <div className='flex justify-around'>
                        <input onChange={(e) => setNumbers(!numbers)} className="cursor-pointer my-2 w-10 border p-2" type="checkbox" name="numbers" id="numbers" />
                        <label className='cursor-pointer w-fit' htmlFor="numbers">Numbers</label>
                    </div>
                    <div className='flex justify-around'>
                        <input onChange={(e) => setSymbols(!symbols)} className="cursor-pointer my-2 w-10 border p-2" type="checkbox" name="symbols" id="symbols" />
                        <label className='cursor-pointer w-fit' htmlFor="symbols">Symbols</label>
                    </div>
                </div>
                <div className="mx-7 my-3 flex justify-center text-sm font-semibold">
                    <button onClick={() => handleGeneratePassword()} className="w-64 border bg-[#0DE6AC] p-2 font-sans">Generate</button>
                </div>
                <ToastContainer className='mt-10'
            position="top-center"
            autoClose={5000}
            hideProgressBar={false}
            newestOnTop={false}
            closeOnClick
            rtl={false}
            pauseOnFocusLoss
            draggable
            pauseOnHover
          />
            </div>
        </div>
    );
}

export default MainWindow;